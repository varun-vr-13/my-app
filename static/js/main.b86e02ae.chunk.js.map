{"version":3,"sources":["data/var1.jpg","data/var2.jpg","components/welcome.js","components/states.js","components/count.js","profile.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Profile","profile","data","profiles","className","map","value","index","key","src","img","basic","name","title","roll","href","type","phone","email","add","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,iGCA3CD,EAAOC,QAAU,IAA0B,kC,2ICGrBC,YCAcA,Y,MCFEA,Y,4BCmCvBC,G,YA7BH,WACR,IAAIC,EAAQC,EAAKC,SACpB,OAEO,yBAAKC,UAAU,8BACZH,EAAQI,KAAI,SAACC,EAAMC,GAAP,OACX,yBAAKH,UAAU,oCAAoCI,IAAKD,GAChD,yBAAKH,UAAU,QACf,yBAAKA,UAAU,cACf,yBAAKA,UAAU,YAAYK,IAAKC,MAChC,4BAAKJ,EAAMK,MAAMC,MACf,wBAAIC,MAAM,WAAYP,EAAMK,MAAMG,MACrC,uBAAGC,KAAK,2BAA2B,wBAAIF,MAAM,UAAUG,KAAK,QAAQV,EAAMK,MAAMM,QAC/E,uBAAGJ,MAAM,QAAQE,KAAK,4BAAtB,IAAkD,4BAAKT,EAAMK,MAAMO,QAChE,4BAAKZ,EAAMK,MAAMQ,KACjB,4BAAQJ,KAAK,IAAIX,UAAU,qBAA3B,kBC6CRgB,MArDf,WACE,OACE,yBAAKhB,UAAU,OAEjB,kBAAC,EAAD,QCNkBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b86e02ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/var1.77bede32.jpg\";","module.exports = __webpack_public_path__ + \"static/media/var2.d7f8b2ed.jpg\";","//class component exmple\r\nimport React,{Component} from 'react'\r\n\r\nclass Welcome extends Component\r\n{\r\n  render() //returns null or html\r\n  {\r\n      return ( <div>\r\n      <h1>Class Component</h1>\r\n      <h2> my name is {this.props.name} and this is my mail {this.props.mail}</h2>\r\n     {this.props.children}\r\n      </div>); //not html its jsx\r\n  }\r\n}\r\n\r\n export default Welcome","//states exmple\r\nimport React,{Component} from 'react'\r\n\r\nexport default class States extends Component\r\n{\r\n   constructor() {\r\n          super();\r\n          {\r\n              this.state ={\r\n                  name:\"Varun\",\r\n                  mail:\"Varuncool45@gmail.com\"\r\n              }\r\n          }\r\n      }\r\n       changeColor=() => {\r\n          this.setState({name:\"rohit\"})\r\n      }\r\n      render()\r\n  { \r\n     \r\n      return(\r\n          <div> <h1>heloo state im {this.state.name} </h1> \r\n          <h2> mail is  {this.state.mail} </h2>\r\n          <button type=\"button\" onClick = {()=>\r\n              this.changeColor()\r\n          }>Click me</button>\r\n          </div>\r\n      );\r\n  }\r\n}","import React,{Component} from 'react'\r\nexport default class Counts extends   Component\r\n{\r\n    constructor(){\r\n        super();{\r\n           this.state=\r\n           {\r\n            num:0,\r\n            s1:0,\r\n           }\r\n        }\r\n    }\r\n    inc = ()=>{\r\n       this.setState({num:this.state.num+1});\r\n     }\r\n     dec = ()=>{\r\n        this.setState({num:this.state.num-1});\r\n     }\r\n     start = ()=>{\r\n        this.state.s1 = window.setInterval(this.tog,1000);\r\n     }\r\n     \r\n     tog = ()=>{\r\n        var s=1;\r\n\r\n        this.setState({num:this.state.num+s});\r\n        s++;\r\n     \r\n     }\r\n     stop = ()=>{\r\n         window.clearInterval(this.state.s1);\r\n     }\r\nrender() {\r\n    return (\r\n      <div><h1 style={{margin:\"20px auto 50px 50px\"}}>Time</h1>\r\n      <h2 id=\"num1\" style={{margin:\"auto 50px\"}}>{this.state.num}</h2>\r\n  <label  style={{margin:\" 0px\"}}>Click Me to increment by 1</label>    <button type=\"button\" onClick={()=>this.inc()} className=\"button\" style={{margin:\"50px 20px auto 50px\",backgroundColor:\"blue\",color:\"white\",width:\"100px\",height:\"30px\",fontSize:\"20px\"}}>Click</button>\r\n  <br></br><label style={{margin:\" 0px\"}} for=\"id2\">Click Me to decrement by 1</label>   <button id=\"id2\" type=\"button\" onClick={()=>this.dec()} className=\"button\" style={{margin:\"10px 50px\",backgroundColor:\" red\",color:\"white\",width:\"100px\",height:\"30px\",fontSize:\"20px\"}}>Click Me</button>\r\n  <br></br><label style={{margin:\" 0px\"}} for=\"id3\">Click Me to inc the value</label>       <button type=\"button\" id=\"id3\" onClick={()=>this.start()} className=\"button\" style={{margin:\" 10px 70px\",backgroundColor:\"pink\",color:\"white\",width:\"100px\",height:\"30px\",fontSize:\"20px\"}}>Start</button>\r\n  <br></br><label style={{margin:\" 0px\"}} for=\"id4\">Click Me to stop</label>       <button type=\"button\" id='id4' onClick={()=>this.stop()} className=\"button\" style={{margin:\"10px 130px\",backgroundColor:\"aqua\",color:\"white\",width:\"100px\",height:\"30px\",fontSize:\"20px\"}}>Stop</button>\r\n\r\n      </div>  \r\n        \r\n    );\r\n}\r\n}","import React from 'react';\r\nimport data from './data/data.json'\r\nimport img from './data/var1.jpg'\r\nimport img1 from './data/var2.jpg'\r\nimport profile from './profile.css'\r\n\r\nimport  {BrowserRouter,Route,Link} from \"react-router-dom\"\r\nlet Profile=()=>{    \r\n    let profile=data.profiles;\r\n return(\r\n        \r\n        <div className=\"row justify-content-center\">\r\n        {  profile.map((value,index)=>(\r\n            <div className=\"col-sm-10 col-md-5 col-lg-6 mt-1 \" key={index}>\r\n                    <div className=\"card\">\r\n                    <div className=\"card-body \">\r\n                    <img className=\"img-fluid\" src={img} />\r\n                    <h4>{value.basic.name}</h4>\r\n                      <h4 title='Roll NO' >{value.basic.roll}</h4>\r\n                   <a href=\"tel:{value.basic.phone}\" ><h4 title=\"Contact\" type='link'>{value.basic.phone}</h4></a>\r\n                    <a title=\"Gmail\" href=\"mailto:varun13@gmail.com\"> <h4>{value.basic.email}</h4></a>\r\n                       <h4>{value.basic.add}</h4>\r\n                       <button href=\"/\" className=\"btn btn-secondary\">Click</button>\r\n                   \r\n                        </div>\r\n                 \r\n                    </div>\r\n                    </div>\r\n                    ))\r\n                  } \r\n                    \r\n        </div>\r\n    );\r\n  \r\n  }\r\n  \r\nexport default Profile;\r\n ","import React from 'react';\n\nimport '../src/App.css'\nimport Hello from \"./hello\" //for id1\n//import {Hello} from \"./hello\" //for id2\nimport Welcome from \"./components/welcome\" //class component\nimport Greets from \"./components/greets\"\nimport States from   \"./components/states\"\nimport Hooks from \"./components/hooks\"\nimport Counts from \"./components/count\"\nimport data from \"./data/data\"\nimport Profile from \"./profile\"\nimport Resume from \"./resume\"\nimport  {BrowserRouter as Router,Route,Link} from \"react-router-dom\"\nfunction App() {\n  return (\n    <div className=\"App\"  >\n    \n  <Profile />\n     \n       {/* <h1>hello</h1> \n    <h2>hi</h2>\n  \n    <Hello />\n    <Welcome />\n    <Greets mail=\"vr2@gmail.com\" name=\"varun\"></Greets>\n    <img  src={logo} style={{width:\"200px\",height:\"100px\"}} />\n    <p>hello</p>\n    <p>Childeren </p>\n    <Greets mail=\"vr2@gmail.com\" name=\"Varun\"></Greets>\n   <h1> Using class component</h1>\n \n   <Welcome name=\"pravi\" mail=\"pravi23@gmail.com\">\n     <h2>my nickname is soumya\n\n     </h2>\n   </Welcome>\n   <States /> \n   <Counts /> \n   <Hooks /> */}\n   \n    \n  </div>\n   \n    /*\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div> */\n  \n   \n    \n    \n  ); \n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}